import numpy as np
import pandas as pd
import pickle as pkl
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split, PredefinedSplit, GridSearchCV
from sklearn.metrics import f1_score, precision_score, recall_score, accuracy_score

air_data = pd.read_csv("Invistico_Airline.csv")

air_data.head(10)
air_data.dtypes
air_data.shape
air_data.isna().any(axis=1).sum()
air_data_subset = air_data.dropna(axis=0)
air_data_subset.head(10)
air_data_subset.isna().sum()

air_data_subset_dummies = pd.get_dummies(air_data_subset, columns=['Customer Type','Type of Travel','Class'])
air_data_subset_dummies.head(10)
air_data_subset_dummies.dtypes


#MODEL BUILDING
y = air_data_subset_dummies["satisfaction"]
X = air_data_subset_dummies.drop("satisfaction", axis=1)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)
X_tr, X_val, y_tr, y_val = train_test_split(X_train, y_train, test_size = 0.25, random_state = 0)

#tune model
cv_params = {'n_estimators' : [50,100], 
              'max_depth' : [10,50],        
              'min_samples_leaf' : [0.5,1], 
              'min_samples_split' : [0.001, 0.01],
              'max_features' : ["sqrt"], 
              'max_samples' : [.5,.9]}

# Create list of split indices.
split_index = [0 if x in X_val.index else -1 for x in X_train.index]
custom_split = PredefinedSplit(split_index)

#instantiate model
rf = RandomForestClassifier(random_state=0)

# use gridsearch to search over the specified parameters
rf_val = GridSearchCV(rf, cv_params, cv=custom_split, refit='f1', n_jobs = -1, verbose = 1)

#fit model
%%time
rf_val.fit(X_train, y_train)

#obtain optimal parameters
rf_val.best_params_


#RESULTS AND EVALUATION
rf_opt = RandomForestClassifier(n_estimators = 50, max_depth = 50, min_samples_leaf = 1, min_samples_split = 0.001, max_features="sqrt", max_samples = 0.9, random_state = 0)
  #find optimal model
rf_opt.fit(X_train, y_train)
  #predict on test set
y_pred = rf_opt.predict(X_test)


#OBTAIN PERFORMANCE SCORES

#PRECISION SCORE
pc_test = precision_score(y_test, y_pred, pos_label = "satisfied")
print("The precision score is {pc:.3f}".format(pc = pc_test))

#RECALL SCORE
rc_test = recall_score(y_test, y_pred, pos_label = "satisfied")
print("The recall score is {rc:.3f}".format(rc = rc_test))

#ACCURACY SCORE
ac_test = accuracy_score(y_test, y_pred)
print("The accuracy score is {ac:.3f}".format(ac = ac_test))

#F1-SCORE
f1_test = f1_score(y_test, y_pred, pos_label = "satisfied")
print("The F1 score is {f1:.3f}".format(f1 = f1_test))

