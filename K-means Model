import numpy as np
import pandas as pd

# Important tools for modeling and evaluation.
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.preprocessing import StandardScaler

# Import visualization packages.
import matplotlib.pyplot as plt
import seaborn as sns

penguins = pd.read_csv("penguins.csv")

penguins.head(n = 10)

#DATA EXPLORATION
penguins['species'].unique()
penguins['species'].value_counts(dropna = False)
penguins.isnull().sum()
penguins_subset = penguins.dropna(axis=0).reset_index(drop = True)
penguins_subset.isna().sum()
penguins_subset.head(10)

#ENCODE DATA - encoding Male and Female as MALE and FEMALE
penguins_subset['sex'] = penguins_subset['sex'].str.upper()
penguins_subset = pd.get_dummies(penguins_subset, drop_first = True, columns=['sex'])
penguins_subset = penguins_subset.drop(['island'], axis=1)

#Scale the Features - so that variables have a mean of 0 and std of 1
X = penguins_subset.drop(['species'], axis=1)
X_scaled = StandardScaler().fit_transform(X)


#DATA MODELLING
num_clusters = [i for i in range(2, 11)]
def kmeans_inertia(num_clusters, x_vals):
    inertia = []
    for num in num_clusters:
        kms = KMeans(n_clusters=num, random_state=42)
        kms.fit(x_vals)
        inertia.append(kms.inertia_)
    return inertia
    
#kmeans_inertia returns a list of inertia k=2 to 10
inertia = kmeans_inertia(num_clusters, X_scaled)
inertia

#line plot
inertia = kmeans_inertia(num_clusters, X_scaled)
inertia


#RESULTS AND EVALUATION
def kmeans_sil(num_clusters, x_vals):
    sil_score = []
    for num in num_clusters:
        kms = KMeans(n_clusters=num, random_state=42)
        kms.fit(x_vals)
        sil_score.append(silhouette_score(x_vals, kms.labels_))
    return sil_score

sil_score = kmeans_sil(num_clusters, X_scaled)
sil_score

#line plot
plot = sns.lineplot(x=num_clusters, y=sil_score, marker = 'o')
plot.set_xlabel("# of clusters");
plot.set_ylabel("Silhouette Score");

#decide the optimal k value
kmeans6 = KMeans(n_clusters=6, random_state=42)
kmeans6.fit(X_scaled)

print('Unique labels:', np.unique(kmeans6.labels_))

penguins_subset['cluster'] = kmeans6.labels_
penguins_subset.head()
penguins_subset.groupby(by=['cluster', 'species']).size()

#barplot
penguins_subset.groupby(by=['cluster', 'species']).size().plot.bar(title='Clusters differentiated by species',
                                                                   figsize=(6, 5),
                                                                   ylabel='Size',
                                                                   xlabel='(Cluster, Species)');

penguins_subset.groupby(by=['cluster','species', 'sex_MALE']).size().sort_values(ascending = False)

penguins_subset.groupby(by=['cluster','species','sex_MALE']).size().unstack(level = 'species', fill_value=0).plot.bar(title='Clusters differentiated by species and sex',
                                                                                                                      figsize=(6, 5),
                                                                                                                      ylabel='Size',
                                                                                                                      xlabel='(Cluster, Sex)')
plt.legend(bbox_to_anchor=(1.3, 1.0))
